name: Test Docker Registry Mirrors

on:
  push:
    branches:
      - main  # 或者您的默认分支名称
  schedule:
    - cron: '0 0 */1 * *'  # 每天 UTC 时间 00:00 运行
  workflow_dispatch:  # 允许手动触发

jobs:
  test-registry:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Test Registries and Update README
        run: |
          # 定义表格格式化函数
          format_table_cell() {
            local content="$1"
            local width="$2"
            printf "%-${width}s" "$content"
          }

          # 读取 README.md 中的 registry 列表
          registries=$(awk '
            BEGIN { FS="|"; OFS="|" }
            /\| Registry \| Status \| Speed \| Time \| Integrity \|/,/^$/ {
              if (NR>2 && NF>1) {
                registry = $2
                sub(/^[[:space:]]+/, "", registry)
                sub(/[[:space:]]+$/, "", registry)
                if (registry != "") print registry
              }
            }
          ' README.md)

          # 更新 README.md 的函数
          update_readme() {
            local registry="$1"
            local status="$2"
            local speed="$3"
            local time="$4"
            local integrity="$5"
            
            local formatted_line="| $(format_table_cell "$registry" 20) |"
            formatted_line+=" $(format_table_cell "$status" 6) |"
            formatted_line+=" $(format_table_cell "$speed" 11) |"
            formatted_line+=" $(format_table_cell "$time" 6) |"
            formatted_line+=" $(format_table_cell "$integrity" 9) |"
            
            sed -i "/| $registry *|/c\\$formatted_line" README.md
          }

          # 测试 registry 的函数
          test_registry() {
            local registry="$1"
            local image="$2"
            local max_attempts=3
            local attempt=1
            local output=$(mktemp)

            if ! docker pull docker.io/$image > /dev/null 2>&1; then
              echo "Failed to pull official image"
              update_readme "$registry" "❌" "-" "-" "-"
              return 1
            fi

            official_digest=$(docker inspect --format='{{index .RepoDigests 0}}' docker.io/$image | cut -d'@' -f2)

            while [ $attempt -le $max_attempts ]; do
              echo "Testing $registry (Attempt $attempt/$max_attempts)"
              
              if timeout 60s bash -c "time docker pull $registry/$image" > "$output" 2>&1; then
                pull_time=$(grep real "$output" | awk '{print $2}' | sed 's/0m//;s/s//')
                image_size=$(docker image inspect "$registry/$image" --format='{{.Size}}' | awk '{print $1/1024/1024}')
                speed=$(printf "%.2f" $(echo "scale=2; $image_size / $pull_time" | bc))

                registry_digest=$(docker inspect --format='{{index .RepoDigests 0}}' $registry/$image | cut -d'@' -f2)
                
                if [ "$official_digest" = "$registry_digest" ]; then
                  update_readme "$registry" "✅" "${speed} MB/s" "${pull_time}s" "✅"
                else
                  update_readme "$registry" "✅" "${speed} MB/s" "${pull_time}s" "❌"
                fi

                docker rmi $registry/$image > /dev/null 2>&1
                rm -f "$output"
                return 0
              fi

              attempt=$((attempt + 1))
              sleep 5
            done

            update_readme "$registry" "❌" "-" "-" "-"
            rm -f "$output"
            return 1
          }

          # 主测试循环
          image="library/nginx:alpine"
          echo "$registries" | while IFS='|' read -r registry _; do
            registry=$(echo "$registry" | xargs)
            [ -z "$registry" ] && continue
            
            echo "Testing $registry"
            test_registry "$registry" "$image"
            
            # 清理 Docker 镜像
            docker rmi $registry/$image > /dev/null 2>&1
          done

          # 清理官方镜像
          docker rmi docker.io/$image > /dev/null 2>&1

      - name: Commit and push if changed
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add README.md
          git diff --quiet && git diff --staged --quiet || (git commit -m "update registry test results"; git push)